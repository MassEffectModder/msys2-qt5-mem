_namesuff="-mem"
_with_icu=no
_with_fontconfig=no
_with_openssl=yes
_with_dbus=no
_system_freetype=no
_system_zlib=no
_system_pcre=no
_system_libpng=no
_system_harfbuzz=no
_build_examples=no
_build_tools=no
_build_tests=no
_make_docs=no

# Getting crashes that only happen in release builds?
# Define this and you may have a hope of figuring out
# why ..
_debuggable_release=yes

_configure=./configure
_make=make

_realname=qt5${_namesuff}
pkgbase="mingw-w64-${_realname}"
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
_ver_base=5.12.9
_hotfix=
pkgver=${_ver_base//-/}
pkgrel=1
arch=('any')
pkgdesc="A cross-platform application and UI framework (mingw-w64${_namesuff})"
url='https://www.qt.io/'
install=qt5-${CARCH}.install
license=('GPL3' 'LGPL' 'FDL' 'custom')

_qt5_prefix="${MINGW_PREFIX}/${_realname}"

depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-qtbinpatcher"
         "${MINGW_PACKAGE_PREFIX}-z3"
        )

makedepends=("bison"
             "diffutils"
             "flex"
             "gperf"
             "m4"
             "make"
             "patch"
             "perl"
             "dos2unix"
             "${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-clang"
             "${MINGW_PACKAGE_PREFIX}-clang-tools-extra"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-ruby"
             "${MINGW_PACKAGE_PREFIX}-make"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-openssl"
            )

groups=("${MINGW_PACKAGE_PREFIX}-qt${_namesuff}" "${MINGW_PACKAGE_PREFIX}-qt5${_namesuff}")
options=('!strip' 'staticlibs' 'ccache')
_pkgfqn="qt-everywhere-src-${_ver_base}"
noextract=(${_pkgfqn}${_hotfix}.tar.xz)
source=(https://download.qt.io/official_releases/qt/${pkgver%.*}/${_ver_base}${_hotfix}/single/${_pkgfqn}${_hotfix}.tar.xz
        0000-adjust-qmake-conf-mingw.patch
        0001-qt-5.8.0-fix-sql-libraries-mingw.patch
        0002-qt-5.8.0-configure-gcc-before-clang.patch
        0004-fix-linking-again-different-static-libs.patch
        0005-qt-5.3.0-syncqt-fix.patch
        0006-qt-5.3.0-win_flex-replace.patch
        0007-qt-5.3.0-win32-g-Enable-static-builds.patch
        0008-qt-5.3.0-win32-g-Add-QMAKE_EXTENSION_IMPORTLIB-defaulting-to-.patch
        0011-qt-5.8.0-mingw-dbus-and-pkg-config.patch
        0016-qt-5.8.0-win32-g++-use-qpa-genericunixfontdatabase.patch
        0017-qt-5.3.0-fix-examples-building.patch
        0024-qt-5.3.0-icu-add-U_LIB_SUFFIX_C_NAME.patch
        0025-qt-5.8.0-force-using-make-on-msys.patch
        0028-qt-5.8.0-Revert-untangle-use-of-system-vs.-shell-path-list-se.patch
        0029-qt-5.8.0-Revert-fix-quoting-and-path-separators-in-qtPrepareT.patch
        0030-qt-5.3.1-workaround-ansidecl-h-PTR-define-conflict.patch
        0031-qt-5.5.0-workaround-BOOL-define-conflict.patch
        0034-qt-5.3.2-Use-QMAKE_PREFIX_STATICLIB-in-create_cmake-prf.patch
        0035-qt-5.3.2-dont-add-resource-files-to-qmake-libs.patch
        0036-qt-5.3.2-win32-qt5-static-cmake-link-ws2_32-and--static.patch
        0037-qt-5.4.0-Improve-cmake-plugin-detection-as-not-all-are-suffixed-Plugin.patch
        0038-qt-5.5.0-cmake-Rearrange-STATIC-vs-INTERFACE-targets.patch
        0039-qt-5.4.0-Make-it-possible-to-use-static-builds-of-Qt-with-CMa.patch
        0040-qt-5.4.0-Generate-separated-libraries-in-prl-files-for-CMake.patch
        0041-qt-5.4.0-Fix-mingw-create_cmake-prl-file-has-no-lib-prefix.patch
        0042-qt-5.4.0-static-cmake-also-link-plugins-and-plugin-deps.patch
        0043-qt-5.5.0-static-cmake-regex-QT_INSTALL_LIBS-in-QMAKE_PRL_LIBS_FOR_CMAKE.patch
        0046-qt-5.4.1-Revert-Revert-fix-NTFS-mount-points.patch
        0048-qt-5.4.2-win32-Avoid-platformNativeInterface-segfaults-with-minimal-platform.patch
        0049-qt-5.8.0-win32-do-not-use-fontconfig.patch
        0051-qt-5.9.1-disable-qtlocation-mapboxgl-plugin.patch
        0052-qt-5.11-mingw-fix-link-qdoc-with-clang.patch
        0054-win32-dont-need-flatpack-theme.patch
        0056-qt-5.11-static_icu.patch
        0057-fix-and-enable-iconv-codec.patch
        0059-different-libs-search-order-for-static-and-shared.patch
        0060-activeqt-handle-win64-in-dumpcpp.patch
        0125-qt5-windeployqt-fixes.patch
        0300-qt-5.8.0-cast-errors.patch
        0301-link-evr.patch
        0302-ugly-hack-disable-qdoc-build.patch
        0400-fxc_fix.patch
        0401-angle-fix.patch
        0402-Prevent-Cannot-find-feature-windows_vulkan_sdk.patch
        qml_static_plugins.patch)

# Translates using cygpath according to the ${_make} being used
# (so either mingw32-make or MSYS2 make can be used)
path_conv_for_make() {
    MINGW_PREFIX_W=$(cygpath -m ${MINGW_PREFIX})
    echo -n "${1}" | sed "s|${MINGW_PREFIX_W}|$(cygpath -u ${MINGW_PREFIX})|g"
}

# Runs pkg-config with all arguments, then calls path_conv_for_make on each
# result and then adds delimiter between -I/-L/-l and path - both configure
# and configure.bat prefer this. Results returned as an array.
pkg_config_qt5() {
  local _res=$(${MINGW_PREFIX}/bin/pkg-config $*)
  local -a _final=()
  for _part in $(path_conv_for_make "${_res}"); do
      _final+=($(echo -n "${_part}" | sed "s|-\([ILl]\)\(.*\)|-\1|g"))
      _final+=($(echo -n "${_part}" | sed "s|-\([ILl]\)\(.*\)|\2|g"))
  done
  echo "${_final[@]}"
}

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  [[ -d ${srcdir}/${_pkgfqn} ]] && rm -rf ${srcdir}/${_pkgfqn}
  xz -d --stdout ${srcdir}/${_pkgfqn}${_hotfix}.tar.xz | tar -x --file=- -C ${srcdir} --exclude=${_pkgfqn}/{qtandroidextras,qtmacextras,qtwayland,qtwebengine,qtx11extras} || true

  cd ${srcdir}/${_pkgfqn}

  # MSYS2 gperf cannot handle \r\n.
  find . -name "*.gperf" -exec dos2unix "{}" \;

  apply_patch_with_msg \
    0000-adjust-qmake-conf-mingw.patch \
    0001-qt-5.8.0-fix-sql-libraries-mingw.patch \
    0002-qt-5.8.0-configure-gcc-before-clang.patch \
    0004-fix-linking-again-different-static-libs.patch \
    0005-qt-5.3.0-syncqt-fix.patch \
    0006-qt-5.3.0-win_flex-replace.patch \
    0007-qt-5.3.0-win32-g-Enable-static-builds.patch \
    0008-qt-5.3.0-win32-g-Add-QMAKE_EXTENSION_IMPORTLIB-defaulting-to-.patch \
    0011-qt-5.8.0-mingw-dbus-and-pkg-config.patch \
    0016-qt-5.8.0-win32-g++-use-qpa-genericunixfontdatabase.patch \
    0017-qt-5.3.0-fix-examples-building.patch

    apply_patch_with_msg \
      0025-qt-5.8.0-force-using-make-on-msys.patch

  # Ossi says we should fix this in qwebkit with a $$(shell_path), but the ' quotes get in the way
  # due to qtPrepareTool adding them with $$shell_quote
  apply_patch_with_msg \
    0028-qt-5.8.0-Revert-untangle-use-of-system-vs.-shell-path-list-se.patch \
    0029-qt-5.8.0-Revert-fix-quoting-and-path-separators-in-qtPrepareT.patch \
    0030-qt-5.3.1-workaround-ansidecl-h-PTR-define-conflict.patch \
    0031-qt-5.5.0-workaround-BOOL-define-conflict.patch \
    0034-qt-5.3.2-Use-QMAKE_PREFIX_STATICLIB-in-create_cmake-prf.patch \
    0035-qt-5.3.2-dont-add-resource-files-to-qmake-libs.patch

  # Patches so that qt5-static can be used with cmake.
  apply_patch_with_msg \
    0036-qt-5.3.2-win32-qt5-static-cmake-link-ws2_32-and--static.patch \
    0037-qt-5.4.0-Improve-cmake-plugin-detection-as-not-all-are-suffixed-Plugin.patch \
    0038-qt-5.5.0-cmake-Rearrange-STATIC-vs-INTERFACE-targets.patch \
    0039-qt-5.4.0-Make-it-possible-to-use-static-builds-of-Qt-with-CMa.patch \
    0040-qt-5.4.0-Generate-separated-libraries-in-prl-files-for-CMake.patch \
    0041-qt-5.4.0-Fix-mingw-create_cmake-prl-file-has-no-lib-prefix.patch \
    0042-qt-5.4.0-static-cmake-also-link-plugins-and-plugin-deps.patch \
    0043-qt-5.5.0-static-cmake-regex-QT_INSTALL_LIBS-in-QMAKE_PRL_LIBS_FOR_CMAKE.patch


  apply_patch_with_msg \
    0046-qt-5.4.1-Revert-Revert-fix-NTFS-mount-points.patch

  apply_patch_with_msg \
    0048-qt-5.4.2-win32-Avoid-platformNativeInterface-segfaults-with-minimal-platform.patch \
    0049-qt-5.8.0-win32-do-not-use-fontconfig.patch \
    0051-qt-5.9.1-disable-qtlocation-mapboxgl-plugin.patch \
    0052-qt-5.11-mingw-fix-link-qdoc-with-clang.patch \
    0054-win32-dont-need-flatpack-theme.patch \
    0056-qt-5.11-static_icu.patch \
    0057-fix-and-enable-iconv-codec.patch \
    0059-different-libs-search-order-for-static-and-shared.patch \
    0060-activeqt-handle-win64-in-dumpcpp.patch \
    0125-qt5-windeployqt-fixes.patch \
    0300-qt-5.8.0-cast-errors.patch \
    0301-link-evr.patch \
    0400-fxc_fix.patch \
    0401-angle-fix.patch \
    0402-Prevent-Cannot-find-feature-windows_vulkan_sdk.patch

  local _ARCH_TUNE="-march=nocona -mtune=core2"

  if [ "${_debuggable_release}" = "yes" ]; then
    QMAKE_LFLAGS_RELEASE=
    OPTIM_O="${OPTIM_O} -g"
  else
    QMAKE_LFLAGS_RELEASE="-Wl,-s,--relax,--gc-sections"
    OPTIM_O="${OPTIM_O} -fno-ident -ffunction-sections -fdata-sections"
  fi

  BIGOBJ_FLAGS="-Wa,-mbig-obj"

  # Append these ones ..
  sed -i "s|^QMAKE_CFLAGS .*= \(.*\)$|QMAKE_CFLAGS            = \1 ${_ARCH_TUNE} ${BIGOBJ_FLAGS} ${LTCG_CFLAGS}|g" qtbase/mkspecs/win32-g++/qmake.conf
  if [ -n "$OPTIM_D" ]; then
    sed -i "s|^QMAKE_CFLAGS_DEBUG .*= \(.*\)$|QMAKE_CFLAGS_DEBUG      = \1 ${OPTIM_D}|g" qtbase/mkspecs/win32-g++/qmake.conf
  fi
  if [ -n "$OPTIM_O" ]; then
    sed -i "s|^QMAKE_CFLAGS_RELEASE .*= \(.*\)$|QMAKE_CFLAGS_RELEASE    = \1 ${OPTIM_O}|g" qtbase/mkspecs/win32-g++/qmake.conf
  fi
  sed -i "s|^QMAKE_LFLAGS            =\(.*\)$|QMAKE_LFLAGS            = \1 ${LTCG_LFLAGS}|g" qtbase/mkspecs/win32-g++/qmake.conf
  # But overwrite this one.
  sed -i "s|^QMAKE_LFLAGS_RELEASE .*= \(.*\)$|QMAKE_LFLAGS_RELEASE    = ${QMAKE_LFLAGS_RELEASE}|g" qtbase/mkspecs/win32-g++/qmake.conf

  # To keep the build folder name quite small (PATH_MAX limit)
  # the source folder (long) is renamed to $CARCH (i686 or x86_64)
  cd ${srcdir}
  [[ -d ${CARCH} ]] && rm -rf ${CARCH}
  sleep 5
  mv ${_pkgfqn} ${CARCH}
}

build() {
  local _buildpkgdir=${pkgdirbase}/${pkgname}/${_qt5_prefix}
  mkdir -p ${_buildpkgdir}
  local QTDIR_WIN=$(cygpath -am ${_buildpkgdir})


  local -a _extra_libpaths=()
  local -a _extra_libs=()


  cd ${CARCH}
  touch qtbase/.gitignore

  # Determine the SQL driver configuration, variant dependent.
  # static can't use anything but -qt-sql-sqlite both for size
  # reasons and because shared libraries get auto-detected and
  # built as plugins.
  local -a _sql_config
  _sql_config+=("-no-sql-ibase")
  _sql_config+=("-no-sql-mysql")
  _sql_config+=("-no-sql-odbc")
  _sql_config+=("-no-sql-psql")
  _sql_config+=("-no-sql-sqlite2")
  _sql_config+=("-sql-sqlite")
  _sql_config+=("-qt-sqlite")

  export OPENSSL_LIBS="-lssl -lcrypto -lcrypt32 -lgdi32"

  # Qt manages the compiler flags for release / debug configs separately, so having our own values (-O2) is harmful here ..
  unset CFLAGS
  unset CXXFLAGS
  unset LDFLAGS
  unset QMAKESPEC
  unset XQMAKESPEC
  unset QMAKEPATH
  unset QMAKEFEATURES

  local -a configure_opts

  export PATH="${srcdir}/${CARCH}/qtbase/bin:${srcdir}/${CARCH}/qtbase/lib:${PATH}"
  export LLVM_INSTALL_DIR=${MINGW_PREFIX}
  export QDOC_USE_STATIC_LIBCLANG=1
  # Hack to disable building qdoc
  patch -p1 -i ${srcdir}/0302-ugly-hack-disable-qdoc-build.patch
  export QDOC_SKIP_BUILD=1

  configure_opts+=("-static")
  configure_opts+=("-no-dbus")
  configure_opts+=("-openssl-linked")
  configure_opts+=("-no-fontconfig")
  configure_opts+=("-no-iconv")
  configure_opts+=("-no-glib")
  configure_opts+=("-no-gif")
  configure_opts+=("-no-libjpeg")
  configure_opts+=("-no-gbm")
  configure_opts+=("-no-glib")
  configure_opts+=("-skip" "qtactiveqt")
  configure_opts+=("-skip" "qtcanvas3d")
  configure_opts+=("-skip" "qtcharts")
  configure_opts+=("-skip" "qtdatavis3d")
  configure_opts+=("-skip" "qtdoc")
  configure_opts+=("-skip" "qtnetworkauth")
  configure_opts+=("-skip" "qtpurchasing")
  configure_opts+=("-skip" "qtremoteobjects")
  configure_opts+=("-skip" "qtscxml")
  configure_opts+=("-skip" "qtserialport")
  configure_opts+=("-skip" "qtspeech")
  configure_opts+=("-skip" "qttranslations")
  configure_opts+=("-skip" "qtvirtualkeyboard")
  configure_opts+=("-skip" "qtwebengine")
  configure_opts+=("-skip" "qtsensors")
  configure_opts+=("-skip" "qtserialbus")
  configure_opts+=("-skip" "qtlocation")
  configure_opts+=("-skip" "qtconnectivity")
  configure_opts+=("-skip" "gamepad")
  configure_opts+=("-skip" "qt3d")
  configure_opts+=("-skip" "qtxmlpatterns")
  configure_opts+=("-skip" "qtquickcontrols")
  configure_opts+=("-skip" "qtquickcontrols2")
  configure_opts+=("-skip" "qtscript")
  configure_opts+=("-skip" "qtmultimedia")

  configure_opts+=("-qt-freetype")
  configure_opts+=("-qt-harfbuzz")
  configure_opts+=("-qt-libpng")
  configure_opts+=("-qt-zlib")
  configure_opts+=("-qt-pcre")
  configure_opts+=("-no-icu")
  configure_opts+=("-nomake" "examples")
  configure_opts+=("-nomake" "tests")
  configure_opts+=("-nomake" "tools")

  ${_configure} \
    -prefix ${QTDIR_WIN} \
    -datadir ${QTDIR_WIN}/share/qt5 \
    -archdatadir ${QTDIR_WIN}/share/qt5 \
    -examplesdir ${QTDIR_WIN}/share/qt5/examples \
    -testsdir ${QTDIR_WIN}/share/qt5/tests \
    -opengl es2 \
    -angle \
    -opensource \
    -confirm-license \
    -platform win32-g++ \
    -debug-and-release \
    "${_extra_incpaths[@]}" \
    "${_extra_libpaths[@]}" \
    "${_extra_libs[@]}" \
    -no-iconv \
    -no-gstreamer \
    "${_extra_config[@]}" \
    "${_sql_config[@]}" \
    "${configure_opts[@]}"

  ${_make} ${MAKEFLAGS} || ${_make} ${MAKEFLAGS}
}

check() {
  cd ${CARCH}
  make check -j1 -k
}

package() {

  cd ${CARCH}

  export PATH=${pkgdir}${_qt5_prefix}/bin:${srcdir}/${CARCH}/qtbase/bin:${srcdir}/${CARCH}/qtbase/lib:${PATH}

  ${_make} install

  install -D -m644 LICENSE.FDL     "${pkgdir}${_qt5_prefix}"/share/licenses/qt5/LICENSE.FDL
  install -D -m644 LICENSE.GPLv2   "${pkgdir}${_qt5_prefix}"/share/licenses/qt5/LICENSE.GPLv2
  install -D -m644 LICENSE.GPLv3   "${pkgdir}${_qt5_prefix}"/share/licenses/qt5/LICENSE.GPLv3
  install -D -m644 LICENSE.LGPLv21  "${pkgdir}${_qt5_prefix}"/share/licenses/qt5/LICENSE.LGPLv21
  install -D -m644 LICENSE.LGPLv3  "${pkgdir}${_qt5_prefix}"/share/licenses/qt5/LICENSE.LGPLv3
  install -D -m644 LICENSE.QT-LICENSE-AGREEMENT  "${pkgdir}${_qt5_prefix}"/share/licenses/qt5/LICENSE.QT-LICENSE-AGREEMENT

  # Remove dlls from lib/
  rm -f "${pkgdir}${_qt5_prefix}/lib"/*.dll

  # Workaround for installing empty .pc files
  plain "---> Fix pkgconfig files..."
  local _pc_files=( $(find ${srcdir}/${CARCH} -type f -name Qt5*.pc) )
  cp -f ${_pc_files[@]} ${pkgdir}${_qt5_prefix}/lib/pkgconfig/

  # Fix paths in qconfig.pri and qmodule.pri:
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  QT_PREFIX_WIN=$(cygpath -m ${_qt5_prefix})
  PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdir}${_qt5_prefix})
  MINGW_PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})

  find "${pkgdir}${_qt5_prefix}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${QT_PREFIX_WIN}|${PKGDIR_QT_PREFIX_WIN}|g" {} \;

  find "${pkgdir}${_qt5_prefix}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${QT_PREFIX_WIN}|${PKGDIR_QT_PREFIX_WIN}|g" {} \;

  find "${pkgdir}${_qt5_prefix}/lib" -type f -name '*.cmake' \
      -exec sed -i -e "s|${QT_PREFIX_WIN}|${PKGDIR_QT_PREFIX_WIN}|g" {} \;

    find "${pkgdir}${_qt5_prefix}/lib" -type f -name '*.cmake' \
      -exec sed -i -e "s|${MINGW_PREFIX_WIN}|${PKGDIR_QT_PREFIX_WIN}/..|g" {} \;

    find "${pkgdir}${_qt5_prefix}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${MINGW_PREFIX_WIN}|${PKGDIR_QT_PREFIX_WIN}/..|g" {} \;

    find "${pkgdir}${_qt5_prefix}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${MINGW_PREFIX_WIN}|${PKGDIR_QT_PREFIX_WIN}/..|g" {} \;
}

sha256sums=('a628186814b73e93594ee8e72f975116599f946919ae6bd86611981b739acff0'
            'fabc14c5e854a17f1fdfb6575e0950b1f6e8b0f4ee36cca0c017994b4070ecac'
            '617e6fa85a92353d0073425d37cd5d90d92cb7f906d66dd2d0df576122d091a4'
            '27ce2161b5dbea2fcce6b15948ab722a71036d056420854f6554969f683583bb'
            '5c22ac427335f73a596ca45ffad7e4eaeec51454c823275f2d4dec070fe3c694'
            'a885f4291ca760a22b10685f22ca0662e80395cf0bea926fd67fe5e8e8299684'
            '18fd2fa42215ac47b3b314261ab98cbe65f8231429e4f29a152288a3ca93daf1'
            '4e154fbc9059a096c351d019da6b18c907b1d8b06e028f48c7365f62bcd0edc9'
            '2abde936e4dabc716440ddff1db8d00a98203f7f34eef4c4ee2a9de7d80f1cf4'
            '6ba8edf489c3e24686c36333e5a562c6a0b16b4e9b8331738b0616fa75a97bb0'
            '678c185795a41c7f38822120030585a0427287f3a1c2df9616daaa89f3285df3'
            '61175144833ff17d60018b31c6434afce3adc729a13d0d21021adec3be191185'
            'd7c228df3cc680793a6c858e1fac01092c0877071c075804b7e93f6b3a481eae'
            '97fcd6bd58ff8b8d735a6381b607bb3b4b351d1d07be1bbc18b97155dcbb501d'
            '5c437c611d2d19b834b2ba3301e270bf16e6bc6e6fe6470f8066a443ffcad152'
            '19566c38bd50581acaa6a9f46f0e25c41fdfc8b0b42269126e4d3a9b83e2f224'
            'ddaa067d144f5788ab7a3ed0dfc426d702c13de9c35f04eaaf38d642be4934d4'
            '1e87b30da284c4e581a13ef6c2f7ed6dcded7f62480a9cc6313aa49fdb093b2d'
            'd719bc919730d8a97e87f6d8c3994f1cd680649e4f34a1a20835dcd703ebe82a'
            '8beeb610df3aff14bae43c56e5781cda3d49f1ad23c6e3fc2aa2405ce002de46'
            '6595c9a5dbbdcea44f1c085c25a186b15ca4a732b28d1894a11141ddd472250d'
            'ff97cc90d9eb9c4b9dcdc4adb613a83433a12df9f3034ae8b7a815d0a9b1d242'
            '699402c273ae312e14151494f51b4edf69104db90f7cd6aad48a7519ee793b69'
            'eb7092708d6e7c5262a5f7f7365a9e2ac9b75d0f47f54b28ed2ad5ba2ac63e99'
            '387520d8e0436846a4eaca2bb91f104c2d31b15fb0a14f2a76b6f6b558457e4c'
            '9f9e950f94959a3d831450a38b2791178dfff9e111de6de806c33d6a27f5d53e'
            'b3ac59ee28c97f37829dfb29c33348e053a0a26ae37118ac0387ea2061a8605a'
            'cdb37b1c1d0b89a1e1f47e038a7384f9a084292c7386efc9eb3ec481c2eb723f'
            '2816d297d783c00744d6cf94758da1cb59dfd1061deceb82744e607b8292e324'
            '42724bd154ed98c612d19a7daee2b5028270ef6dbfe7f35d5f97c8d0605f9fe6'
            '3dc4d7c4fed8fedd726211edbfe13f4d78247d3ab2f789f3ce2a8e43e59a7c5b'
            'c84cb5ba4243413232bc693fb0f54c0283bf0e496e6790a2698f226f80275a61'
            'e8cc18754c5c77047ac9a5ac9e7c7638f655e6524539245779c7803bddbb4c3d'
            '00e32052ac1a9a8391275dfe69901d4ae146ac1441c00bf46f3ef1cfe459a78d'
            '8a74fab12c9d3faac81d75ea1c0662624b83059631db8d9f2570b414d62dc692'
            'b878680172290ad2dcb5508827ef5a9230cbfd8e97d2672d2e96b5addbd55833'
            '2f3625f2e0cc7ac850ca0811cd9b149693181e80cec80738fe27d35f248d87c5'
            '928a8eaca8840ff353cdff8fd11140724cb89094e6115fdd7b8cf534830adcca'
            '553b16d40fcc6eb083893a9d75cf39815d4ab545106106346a39fcf5a36bc8f7'
            '9ea7aeb486023f3aebf1af44603ebd9266009aaeaf91e52c37c8c5154ea3900c'
            '4f2375373829b6764a4552d4183bccd43b8c308e4dee1e2f95d06298de47afaa'
            '7e57ce20b6707bc3b4a727da3287cadda13a74317d86515358b2535bc15244c7'
            '24ef832cac04257b65557ce19fbdfdc72f6b693c9681012d3ec9f9c28a0ad972'
            '2da436e472c1201ff5f06a26caa17522e341e3c59f43437940da488225e40d17'
            'e6e19e0a1409fbaff8fc3e7c1701801b7a648b853e4a63228245ffab862b5b83'
            '670161ba661ea3dccd883473e39aaecb683a3c92da73502dc6939d496507532c')
